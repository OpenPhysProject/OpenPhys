<div class="lesson-content">
    <div class="lesson-content-title"><%- title %></div>
    
     <div class="lesson-content-body">
        <div class="lesson-content-memo">NMR spin echo simulation</div>  
        <div class="col-sm-10 col-md-10 col-lg-10" 
         id="Caption" style="text-align: center; font-size: 20pt; padding:1pt; margin:0pt; background-color: lightblue;"> 
        NMR Simulation   </div>
 
        <div class="col-sm-10 col-md-10 col-lg-10">        
            <canvas id="my3DCanvas" width="1000" height="500" style="width:100%; height:100%; border:1px solid #000000;" ></canvas>  
        </div>
    
        <div class="lesson-content-footer">Page <%- number %>  <%- group %></div>     
    </div>
    
<script>
   // Uses https://threejs.org/ 3D graphics library
   // GLOBAL VARIABLES
    var camera, scene, renderer, geometry, material, mesh;
    var canvasWidth = 1000 ;
    var canvasHeight=  500 ;        
    var nSpins = 7;
    var nPlots= 1;
    var ArrowLength = 500; //200; //500;
    var frequency   = 0.08; // controls spread of arrows
    var xshifts=[0,250];
    //var xshift = 0;
    var k, t = 0;
    var M = []; // Magnetization vectors
    
    for (k=0; k<nSpins; k++){
	ph = 1 + frequency*(k-(nSpins-1)/2);
	console.log('phase inc', ph ,'deg');
	M[k] = {flip_deg:0, phase_deg:0, phaseInc_deg:ph, len:ArrowLength, plot:0}; // MAGNETIZATION VECTOR
	}
    //flip_deg_max = 90;
    //speed = -0.003 * Math.PI / 2;
        
    // ---- STARTS HERE ----    
    init();
    animate();

    // ---- FUNCTIONS ----
    function init() {
	// 
        var AxisLength = ArrowLength;
        var plot; 
        scene = new THREE.Scene();
        doCamera();
        
        for (plot=0; plot<nPlots; plot++) {
            xshift = xshifts[plot];
            doMagnetization(AxisLength);
            var yshift = -ArrowLength/2;
            doCircle(AxisLength, yshift);
        }
        
        renderer = new THREE.WebGLRenderer( { canvas: my3DCanvas } );
        //renderer.setSize(displayWidth, displayHeight);
    }
	function doCamera(){
            var near =1, far=10000;
            var CameraYlook = -300 ;
            var f = 600; // frustrum
            var left=-f, right=+f, top=f, bottom=-f;
            
            camera = new THREE.OrthographicCamera( left, right, top, bottom, near, far );
            camera.position.set(0,0,600); // x,y,z
            camera.lookAt( 0, CameraYlook, 0 );
            //var aspect = window.innerWidth / window.innerHeight;
            //var FOV_deg = 80;
            //camera      = new THREE.PerspectiveCamera( FOV_deg, aspect, near, far );            
        }
          
        function doMagnetization(AxisLength){
            // MESH
            var RadiusLarge = 8/2;
            var RadiusSmall = 2/2;
            var MagGeometry  = new THREE.CylinderGeometry( RadiusSmall, RadiusLarge, M[0].len, 100 );
            //var MagGeometry  = new THREE.ConeGeometry( RadiusLarge, M[0].len,64,64 );
            //ConeGeometry(radius : Float,
                            // height : Float,
                            // radialSegments : Integer,
                            // heightSegments : Integer,
                            // openEnded : Boolean,
                            // thetaStart : Float,
                            // thetaLength : Float)

            var red    = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: false } );
            var green  = new THREE.MeshBasicMaterial( { color: 0x00ff00, wireframe: false } );
            var blue   = new THREE.MeshBasicMaterial( { color: 0x00ffff, wireframe: false } );
            var yellow = new THREE.MeshBasicMaterial( { color: 0xffff00, wireframe: false } );
            // GLOBAL - Magnetization
            arrowM = [];
            for (k=0; k<nSpins; k++){
                    if (k==0) {arrowM[k] = new THREE.Mesh( MagGeometry, red) }
                    else       arrowM[k] = new THREE.Mesh( MagGeometry, yellow);
                    scene.add(arrowM[k]);
                    arrowM[k] = setArrow(arrowM[k], M[k]);
                }
            //arrowM2 = new THREE.Mesh( MagGeometry, blue);   scene.add(arrowM2); arrowM2 = setArrow(arrowM2, M[1]);
            //arrowM3 = new THREE.Mesh( MagGeometry, green);  scene.add(arrowM3); arrowM3 = setArrow(arrowM3, M[2]);
            }
        
        function doSquare(){
		// https://threejs.org/docs/index.html#manual/en/introduction/Drawing-lines
		//create a blue LineBasicMaterial
		var material = new THREE.LineBasicMaterial( { color: 0xff0000 } );
		var geo = new THREE.Geometry();
		var L = 400;
		var y = -200;
		geo.vertices.push(new THREE.Vector3( -L, y, -L) );
		geo.vertices.push(new THREE.Vector3( +L, y, -L) );
		geo.vertices.push(new THREE.Vector3( +L, y, +L) );
		geo.vertices.push(new THREE.Vector3( -L, y, +L) );
		geo.vertices.push(new THREE.Vector3( -L, y, -L) );
		var line = new THREE.Line( geo, material );
		scene.add( line );
		return
	}
	function setArrow(arrow, d) {
		// draw arrow with flip and phase (overwrites arrow previous direction and position)
		// d = {flip_deg:90, phase_deg:0, len:AxisLength};
		var flip_rad = -d.flip_deg/180 * Math.PI ;
		var L2       =  d.len * Math.sin(flip_rad);
		var phase_rad= -d.phase_deg/180 * Math.PI ;

		// points along NMR-Z
		arrow.rotation.x = 0;
		arrow.rotation.y = 0;
		arrow.rotation.z = 0;
		arrow.rotateZ(flip_rad);  // rotation down from NMR Z axis
		// correct for rotation about object center (instead of end)
		arrow.position.x =  d.len/2 * Math.sin(-flip_rad);
		arrow.position.y =  d.len/2 * (Math.cos(flip_rad) -1);
		arrow.position.z  = 0;
		// rotate to set phase
		arrow.rotateOnWorldAxis(new THREE.Vector3(0,1,0), phase_rad);
		arrow.position.z += +L2/2 * Math.sin(phase_rad) ;
		arrow.position.x += -L2/2 * (Math.cos(phase_rad) -1) ;
                
                arrow.position.x += xshift;
     
		return arrow;
	}
	function doCircle(radius, yshift){
		// draw a circle and cross
		//var y = yshift; // transverse plan is shifted down by this amount.
		var nseg = 100;
		// Circle
		var material = new THREE.LineBasicMaterial( { color: 0xff0000 } );
		var geo = new THREE.Geometry();
		var a, angle;
		for (a=0; a<nseg; a++){
			angle = 2*Math.PI * a/(nseg-1);
			x = radius * Math.sin(angle);
			z = radius * Math.cos(angle);
			geo.vertices.push(new THREE.Vector3( x+xshift, yshift, z) );
		}
		var line = new THREE.Line( geo, material );
		scene.add( line );

		// Cross
		var geo = new THREE.Geometry();
		geo.vertices.push(new THREE.Vector3( -radius+xshift, yshift, 0) );
		geo.vertices.push(new THREE.Vector3( +radius+xshift, yshift, 0) );
		scene.add( new THREE.Line(geo, material) );
		//
		var geo = new THREE.Geometry();
		geo.vertices.push(new THREE.Vector3( xshift, yshift, -radius) );
		geo.vertices.push(new THREE.Vector3( xshift, yshift, +radius) );
		scene.add( new THREE.Line(geo, material) );
	}
	function doAxes_NotUsed(AxisLength){
		var AxisRadius = 4;
		var red    = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: false } );
		var AxisGeometry = new THREE.CylinderGeometry( AxisRadius, AxisRadius, AxisLength, 10 );
		var xAxis = new THREE.Mesh( AxisGeometry, red );   scene.add( xAxis );
		var yAxis = new THREE.Mesh( AxisGeometry, red );  scene.add( yAxis );
		var zAxis = new THREE.Mesh( AxisGeometry, red ); scene.add( zAxis );
		var xAxisData = {flip_deg:90, phase_deg:0, len:AxisLength};
		var yAxisData = {flip_deg:90, phase_deg:90, len:AxisLength};
		xAxis = setArrow(xAxis, xAxisData);
		yAxis = setArrow(yAxis, yAxisData);
		// zAxis does not need any rotation
		return;
	}

	function animate() {
        requestAnimationFrame( animate );
        render();
    }
	function render() {
            var inc, k;
            t += 1;
            var excitation_flip = 90;

            var captions = [   "Start: Equilibrium", 
                               "90 Degree Flip", 
                               "Free Precession (dephasing)",
                               "180 degree refocusing pulse",
                               "Free Precession (rephasing)",
                               "Spin Echo (simulation paused)"
                             ];
                             
            //        ts0  ts1   ts2     ts3  ts4  ts5     ts6
            //       pause  90  dephase eyes eyes rephase pause   
            var ts = [100,  30,  130,    50,   50, 130,  300];                 
                
            // PULSE SEQUENCE
            if      (t < ts[0])      { t0 = t;  document.getElementById("Caption").innerHTML = captions[0]; }  // pause
            else if (t < t0 + ts[1]) { t1 = t;  document.getElementById("Caption").innerHTML = captions[1];  // 90
                                                inc = excitation_flip/(ts[1]-1);
                                                for (k=0; k<nSpins; k++){ M[k].flip_deg += inc; };  }  
            else if (t < t1+ts[2])   { t2 = t;  document.getElementById("Caption").innerHTML = captions[2];
                                                for (k=0; k<nSpins; k++){ M[k].phase_deg += M[k].phaseInc_deg }; }  // precession
            // PANCAKE FLIP HERE
            else if (t < t2+ts[3])   { t3 = t;  document.getElementById("Caption").innerHTML = captions[3]; }   // just delay for eyes 
            else if (t == t3+1)      { t4 = t;  for (k=0; k<nSpins; k++){ M[k].phase_deg *= -1;}  }  // 180
            else if (t < t4+ts[4])   { t50= t;  }   // just delay for eyes

            else if (t < t50+ts[5])  { t60 = t; document.getElementById("Caption").innerHTML = captions[4];
                                                for (k=0; k<nSpins; k++){ M[k].phase_deg += M[k].phaseInc_deg; }; }  // precession

            else if (t < t60+ts[6])  {          document.getElementById("Caption").innerHTML = captions[5];}  	// pause
            else                     { t=0;     for (k=0; k<nSpins; k++){ M[k].flip_deg=0;  M[k].phase_deg=0; }} 	 // reset.


        for (plot=0; plot<nPlots; plot++) {
            xshift = xshifts[plot];   
            for (k=0; k<nSpins; k++){ arrowM[k] = setArrow(arrowM[k], M[k]) }
        }
    
	renderer.render( scene, camera );
	}

</script>


</div>